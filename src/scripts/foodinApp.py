# -*- coding: utf-8 -*-
"""Project_Bangkit.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R0ICTH3hVFMIeYM-javjldUjq37uJwuD
"""

import string
import numpy as np
import sys, json

def get_lines():
  lines = input()
  return lines

#Name of user
def user_name(data):
  name = data['name']
  return name

#User gender
def user_gender(data):
  gender = data['gender'].lower()
  while gender not in ['male', 'female']:
    print("Please insert your gender correctly")
    gender = input("Select your gender " + name + "\nMale/Female ").lower()
  return gender

# input_data
def list_activity(weight, item):
  activity = str(item['activityName'])
  # activity = item['activityName']
  kind = item['kind']
  duration = float(item['duration'])

  if activity == "1": 
    if kind == "a":
      bmr_1 = int((4*weight-0.18)*duration)
    elif kind == "b":  
      bmr_1 = int((6*weight+0.4)*duration) 
    elif kind == "c": 
      bmr_1 = int((8*weight-1.2)*duration) 
    elif kind == "d":      
      bmr_1 = int((10*weight-0.62)*duration)
    elif kind == "e":      
      bmr_1 = int((12*weight-1.38)*duration) 
    elif kind == "f":     
      bmr_1 = int((16*weight-0.64)*duration)
    elif kind == "g": 
      bmr_1 = int((8.5*weight+0.62)*duration)
    elif kind == "h":  
      bmr_1 = int((5*weight+0.36)*duration)

  elif activity == "2":
    if kind == "a":
      bmr_1 = int((3*weight+0.2)*duration)
    elif kind == "b":
      bmr_1 = int((5.5*weight+0.83)*duration)
    elif kind == "c":
      bmr_1 = int((7*weight+0.94)*duration)
    elif kind == "d":
      bmr_1 = int((10.5*weight+1.2)*duration)
    elif kind == "e":
      bmr_1 = int((12.5*weight+1.36)*duration)

  elif activity == "3":    
    if kind == "a":      
      bmr_1 = int((3.5*weight-0.26)*duration)
    elif kind == "b":      
      bmr_1 = int((8*weight-1.2)*duration)

  elif activity == "4":    
    bmr_1 = int((8*weight-1.2)*duration)

  elif activity == "5":
    if kind == "a":      
      bmr_1 = int((3*weight+0.2)*duration)
    elif kind == "b":     
      bmr_1 = int((6*weight+0.4)*duration)

  elif activity == "6":    
    bmr_1 = int((5.5*weight+0.84)*duration)

  elif activity == "7":    
    bmr_1 = int((9*weight-1.15)*duration)

  elif activity == "8": 
    if kind == "a":      
      bmr_1 = int((3.5*weight+0.26)*duration)
    elif kind == "b":      
      bmr_1 = int((7*weight+0.94)*duration)
    elif kind == "c":      
      bmr_1 = int((8.5*weight+0.62)*duration)
    elif kind == "d":      
      bmr_1 = int((12*weight-1.38)*duration)

  elif activity == "9":    
    bmr_1 = int((7*weight+0.94)*duration)

  elif activity == "10": 
    if kind == "a":      
      bmr_1 = int((5*weight+0.36)*duration)
    elif kind == "b":      
      bmr_1 = int((6.5*weight+0.45)*duration)
    elif kind == "c":      
      bmr_1 = int((7*weight+0.94)*duration)
    elif kind == "d":      
      bmr_1 = int((8.5*weight+0.62)*duration)  
    elif kind == "e":     
      bmr_1 = int((6*weight+0.4)*duration) 

  elif activity == "11":    
    bmr_1 = int((4*weight-0.18)*duration)

  elif activity == "12":    
    bmr_1 = int((6*weight+0.4)*duration)

  elif activity == "13":
    if kind == "a":      
      bmr_1 = int((2.5*weight+0.64)*duration)
    elif kind == "b":      
      bmr_1 = int((4*weight-0.18)*duration)


  elif activity == "14":    
    bmr_1 = int((5*weight+0.8)*duration)


  elif activity == "15":
    if kind == "a":      
      bmr_1 = int((3*weight+0.2)*duration)
    elif kind == "b":     
      bmr_1 = int((5.5*weight+0.84)*duration)


  elif activity == "16": 
    if kind == "a":      
      bmr_1 = int((8*weight-1.2)*duration)
    elif kind == "b":     
      bmr_1 = int((9*weight-1.16)*duration)
    elif kind == "c":      
      bmr_1 = int((10*weight-0.62)*duration)
    elif kind == "d":      
      bmr_1 = int((11*weight-1)*duration)
    elif kind == "e":      
      bmr_1 = int((11.5*weight+0.82)*duration)
    elif kind == "f":      
      bmr_1 = int((12.5*weight+1.35)*duration)
    elif kind == "g":      
      bmr_1 = int((13.5*weight+1.4)*duration)
    elif kind == "h":      
      bmr_1 = int((14*weight-0.8)*duration)
    elif kind == "i":      
      bmr_1 = int((15*weight-0.25)*duration)
    elif kind == "j":      
      bmr_1 = int((16*weight-0.65)*duration)
    elif kind == "k":
      bmr_1 = int((18*weight)*duration)

  elif activity == "17":
    if kind == "a":     
      bmr_1 = int((4*weight-0.18)*duration)
    elif kind == "b":      
      bmr_1 = int((6*weight+0.4)*duration)
    elif kind == "c":     
      bmr_1 = int((10*weight-0.62)*duration)


  elif activity == "18":    
    bmr_1 = int((3.5*weight+0.25)*duration)
  elif activity == "19":   
    bmr_1 = int((4.5*weight+0.75)*duration)


  elif activity == "20":
    if kind == "a":     
      bmr_1 = int((4.5*weight+0.75)*duration)
    elif kind == "b":      
      bmr_1 = int((6*weight+0.4)*duration)
    elif kind == "c":      
      bmr_1 = int((6.5*weight+0.45)*duration)
    elif kind == "d":     
      bmr_1 = int((7*weight+0.95)*duration)
    elif kind == "e":      
      bmr_1 = int((8*weight-1.2)*duration)
  
  
  elif activity == "21":    
    bmr_1 = int((2.5*weight+0.64)*duration)  
  elif activity == "22":    
    bmr_1 = int((3*weight+0.2)*duration)  

  elif activity == "23":  
    if kind == "a":      
      bmr_1 = int((6*weight+0.4)*duration)
    elif kind == "b":      
      bmr_1 = int((9*weight-1.15)*duration)
    elif kind == "c":     
      bmr_1 = int((12*weight-1.375)*duration)

  elif activity == "24":   
    bmr_1 = int((4*weight-0.18)*duration)  
  elif activity == "25":    
    bmr_1 = int((5*weight+0.35)*duration)  
  elif activity == "26":    
    bmr_1 = int((2.5*weight+0.64)*duration)  
  elif activity == "27":   
    bmr_1 = int((4*weight-0.18)*duration)  
  elif activity == "28":    
    bmr_1 = int((2.5*weight+0.64)*duration)  
  elif activity == "29":   
    bmr_1 = int((6*weight+0.4)*duration)  

  elif activity == "30":  
    if kind == "a":      
      bmr_1 = int((2.5*weight+0.64)*duration) 
    elif kind == "b":      
      bmr_1 = int((8*weight-1.2)*duration)
    elif kind == "c":     
      bmr_1 = int((9*weight-1.5)*duration)


  elif activity == "31":
    if kind == "a":      
      bmr_1 = int((3*weight+0.2)*duration) 
    elif kind == "b":      
      bmr_1 = int((8*weight-1.2)*duration)


  elif activity == "32":
    if kind == "a":      
      bmr_1 = int((3*weight+0.2)*duration) 
    elif kind == "b":     
      bmr_1 = int((3.5*weight+0.25)*duration)
    elif kind == "c":     
      bmr_1 = int((4.28*weight+1.4)*duration)
    elif kind == "d":     
      bmr_1 = int((4.5*weight+0.75)*duration)


  elif activity == "33":    
    bmr_1 = int((4*weight-0.18)*duration)


  elif activity == "34":    
    bmr_1 = int((4*weight-0.18)*duration)


  elif activity == "35":
    if kind == "a":      
      bmr_1 = int((8*weight-1.2)*duration) 
    elif kind == "b":      
      bmr_1 = int((12*weight-1.375)*duration)


  elif activity == "36":    
    bmr_1 = int((12*weight-1.375)*duration)


  elif activity == "37":  
    if kind == "a":      
      bmr_1 = int((2.5*weight+0.64)*duration) 
    elif kind == "b":     
      bmr_1 = int((3*weight+0.2)*duration)
    elif kind == "c":      
      bmr_1 = int((3.5*weight+0.25)*duration)
    elif kind == "d":      
      bmr_1 = int((4*weight-0.18)*duration)
    elif kind == "e":     
      bmr_1 = int((6*weight+0.4)*duration)
    elif kind == "f":      
      bmr_1 = int((6.5*weight+0.45)*duration)
    elif kind == "g":      
      bmr_1 = int((8*weight-1.2)*duration)


  elif activity == "38":    
    bmr_1 = int((12*weight-1.375)*duration)

  elif activity == "39":    
    bmr_1 = int((10*weight+0.62)*duration)


  elif activity == "40":    
    bmr_1 = int((4*weight-0.18)*duration)
  elif activity == "41":    
    bmr_1 = int((7*weight+0.95)*duration)
  elif activity == "42":    
    bmr_1 = int((8*weight-1.2)*duration)
  elif activity == "43":    
    bmr_1 = int((9*weight-1.15)*duration)
  elif activity == "44":   
    bmr_1 = int((10*weight+0.62)*duration)


  elif activity == "45": 
    if kind == "a":      
      bmr_1 = int((6*weight+0.4)*duration)
    elif kind == "b":      
      bmr_1 = int((10*weight-0.62)*duration)
  
  elif activity == "46":    
    bmr_1 = int((8*weight-1.2)*duration)

  elif activity == "47":   
    if kind == "a":      
      bmr_1 = int((7*weight+0.95)*duration)
    elif kind == "b":      
      bmr_1 = int((10*weight-0.62)*duration)

  elif activity == "48": 
    if kind == "a":     
      bmr_1 = int((8*weight-1.2)*duration)
    elif kind == "b":     
      bmr_1 = int((11*weight-1)*duration)

  elif activity == "49":    
    if kind == "a":      
      bmr_1 = int((8*weight-1.2)*duration)
    elif kind == "b":      
      bmr_1 = int((10*weight-0.62)*duration)
    elif kind == "c":     
      bmr_1 = int((12*weight-1.375)*duration)

  elif activity == "50":    
    bmr_1 = int((10*weight-0.62)*duration)
  elif activity == "51":   
    bmr_1 = int((3*weight+0.2)*duration)
  elif activity == "52":    
    bmr_1 = int((5*weight+0.35)*duration)
  elif activity == "53":    
    bmr_1 = int((7*weight+0.95)*duration)
  elif activity == "54":    
    bmr_1 = int((12*weight-1.375)*duration)
  elif activity == "55":    
    bmr_1 = int((3*weight+0.2)*duration)

  elif activity == "56": 
    if kind == "a":     
      bmr_1 = int((7*weight+0.95)*duration)
    elif kind == "b":     
      bmr_1 = int((10*weight-0.62)*duration)

  elif activity == "57":   
    bmr_1 = int((5*weight+0.35)*duration)

  elif activity == "58":
    if kind == "a":      
      bmr_1 = int((4*weight-0.18)*duration)
    elif kind == "b":     
      bmr_1 = int((6*weight+0.4)*duration)

  elif activity == "59":   
    bmr_1 = int((12*weight-1.375)*duration)
  elif activity == "60":    
    bmr_1 = int((4*weight-0.18)*duration)
  elif activity == "61":    
    bmr_1 = int((4*weight-0.18)*duration)

  elif activity == "62":   
    if kind == "a":      
      bmr_1 = int((8*weight-1.2)*duration)
    elif kind == "b":      
      bmr_1 = int((6*weight+0.4)*duration)
    elif kind == "c":     
      bmr_1 = int((7*weight+0.95)*duration)

  elif activity == "63":   
    bmr_1 = int((3*weight+0.25)*duration)

  elif activity == "64":  
    if kind == "a":     
      bmr_1 = int((3*weight+0.2)*duration)
    elif kind == "b":      
      bmr_1 = int((8*weight-1.2)*duration)
    elif kind == "c":      
      bmr_1 = int((8*weight-1.2)*duration)

  elif activity == "65":    
    bmr_1 = int((6*weight+0.4)*duration)
  elif activity == "66":    
    bmr_1 = int((7*weight+0.95)*duration)
  elif activity == "67":   
    bmr_1 = int((7*weight+0.95)*duration)

  elif activity == "68":   
    if kind == "a":      
      bmr_1 = int((3.5*weight+0.25)*duration)
    elif kind == "b":     
      bmr_1 = int((5*weight+0.35)*duration)
    elif kind == "c":     
      bmr_1 = int((6*weight+0.4)*duration)
    elif kind == "d":      
      bmr_1 = int((8*weight-1.2)*duration)

  elif activity == "69": 
    if kind == "a":      
      bmr_1 = int((2.8*weight-1.4)*duration)
    elif kind == "b":     
      bmr_1 = int((4*weight-0.18)*duration)
    elif kind == "c":      
      bmr_1 = int((5*weight+0.35)*duration)
    elif kind == "d":      
      bmr_1 = int((3*weight+0.2)*duration)

  elif activity == "70":   
    bmr_1 = int((3*weight+0.2)*duration)

  elif activity == "71":
    if kind == "a":      
      bmr_1 = int((7*weight+0.95)*duration)
    elif kind == "b":     
      bmr_1 = int((7.5*weight+1)*duration)
    elif kind == "c":     
      bmr_1 = int((8*weight-1.2)*duration)
    elif kind == "d":     
      bmr_1 = int((9*weight-1.15)*duration)


  elif activity == "72":    
    bmr_1 = int((2.5*weight+0.64)*duration)
  elif activity == "73":   
    bmr_1 = int((6.5*weight+0.45)*duration)
  elif activity == "74":    
    bmr_1 = int((5*weight+0.35)*duration)
  elif activity == "75":   
    bmr_1 = int((2.5*weight+0.64)*duration)
  elif activity == "76":   
    bmr_1 = int((4*weight-0.18)*duration)
  elif activity == "77":   
    bmr_1 = int((6.5*weight+0.45)*duration)
  elif activity == "78":    
    bmr_1 = int((8*weight-1.2)*duration)


  elif activity == "79":
    if kind == "a":     
      bmr_1 = int((2*weight+0.5)*duration)
    elif kind == "b":      
      bmr_1 = int((2.5*weight+0.64)*duration)
    elif kind == "c":     
      bmr_1 = int((3*weight+0.2)*duration)
    elif kind == "d":      
      bmr_1 = int((3.3*weight+0.4)*duration)
    elif kind == "e":      
      bmr_1 = int((3.8*weight-1.8)*duration)
    elif kind == "f":      
      bmr_1 = int((5*weight+0.35)*duration)
    elif kind == "g":      
      bmr_1 = int((5*weight+0.35)*duration)
    elif kind == "h":      
      bmr_1 = int((6*weight+0.4)*duration)
    elif kind == "i":     
      bmr_1 = int((6.3*weight+0.62)*duration)
    elif kind == "j":      
      bmr_1 = int((8*weight-1.2)*duration)

  elif activity == "80":    
    bmr_1 = int((2.5*weight+0.64)*duration)

  elif activity == "81":
    if kind == "a":     
      bmr_1 = int((3*weight+0.2)*duration)
    elif kind == "b":      
      bmr_1 = int((4*weight-0.18)*duration)
    elif kind == "c":     
      bmr_1 = int((7*weight+0.95)*duration)
    elif kind == "d":     
      bmr_1 = int((12*weight-1.375)*duration)

  elif activity == "82":   
    bmr_1 = int((12*weight-1.375)*duration)
  elif activity == "83":    
    bmr_1 = int((5*weight+0.35)*duration)
  elif activity == "84":    
    bmr_1 = int((4*weight-0.18)*duration)
  elif activity == "85":    
    bmr_1 = int((3*weight+0.2)*duration)
  
  
  
  elif activity == "86":
    if kind == "a":      
      bmr_1 = int((5*weight+0.35)*duration)
    elif kind == "b":      
      bmr_1 = int((3*weight+0.2)*duration)

  elif activity == "87":
    if kind == "a":     
      bmr_1 = int((6*weight+0.4)*duration)
    elif kind == "b":     
      bmr_1 = int((7*weight+0.95)*duration)  

  elif activity == "88":  
    if kind == "a":     
      bmr_1 = int((7*weight+0.95)*duration) 
    elif kind == "b":     
      bmr_1 = int((12.5*weight+1.35)*duration)  
    elif kind == "c":     
      bmr_1 = int((16*weight-0.64)*duration)  


  elif activity == "89":    
    bmr_1 = int((5*weight+0.35)*duration)
  elif activity == "90":    
    bmr_1 = int((3*weight+0.2)*duration)
  elif activity == "91":   
    bmr_1 = int((5*weight+0.35)*duration)


  elif activity == "92":   
    if kind == "a":     
      bmr_1 = int((7*weight+0.95)*duration)
    elif kind == "b":      
      bmr_1 = int((10*weight-0.62)*duration)
    elif kind == "c":     
      bmr_1 = int((7*weight+0.95)*duration)
    elif kind == "d":      
      bmr_1 = int((10*weight-0.62)*duration)
    elif kind == "e":     
      bmr_1 = int((11*weight-1)*duration)
    elif kind == "f":      
      bmr_1 = int((6*weight+0.4)*duration)
    elif kind == "g":     
      bmr_1 = int((8*weight-1.2)*duration)
    elif kind == "h":      
      bmr_1 = int((8*weight-1.2)*duration)
    elif kind == "i":      
      bmr_1 = int((4*weight-0.18)*duration)
    elif kind == "j":      
      bmr_1 = int((10*weight-0.62)*duration)

  elif activity == "93":    
    bmr_1 = int((4*weight-0.18)*duration)
  elif activity == "94":    
    bmr_1 = int((10*weight-0.62)*duration)
  elif activity == "95":   
    bmr_1 = int((3*weight+0.2)*duration)
  elif activity == "96":    
    bmr_1 = int((8*weight-1.2)*duration)
  elif activity == "97":    
    bmr_1 = int((3*weight+0.2)*duration)

  elif activity == "98":  
    if kind == "a":     
      bmr_1 = int((5.5*weight+0.84)*duration) 
    elif kind == "b":      
      bmr_1 = int((7*weight+0.95)*duration)  
    elif kind == "c":     
      bmr_1 = int((9*weight-1.15)*duration)
    elif kind == "d":      
      bmr_1 = int((15*weight-0.26)*duration)


  elif activity == "99":
    if kind == "a":      
      bmr_1 = int((7*weight+0.95)*duration) 
    elif kind == "b":      
      bmr_1 = int((8*weight-1.2)*duration)  
    elif kind == "c":      
      bmr_1 = int((9*weight-1.15)*duration)
    elif kind == "d":      
      bmr_1 = int((14*weight-0.8)*duration)
    elif kind == "e":      
      bmr_1 = int((16.5*weight-0.16)*duration)

  elif activity == "100":    
    if kind == "a":      
      bmr_1 = int((5*weight+0.35)*duration) 
    elif kind == "b":      
      bmr_1 = int((6*weight+0.4)*duration)  
    elif kind == "c":      
      bmr_1 = int((8*weight-1.2)*duration)

  elif activity == "101":    
    bmr_1 = int((7*weight+0.95)*duration)
  elif activity == "102":    
    bmr_1 = int((8*weight-1.2)*duration)
  elif activity == "103":   
    bmr_1 = int((3.5*weight+0.25)*duration)
  elif activity == "104":    
    bmr_1 = int((3.5*weight+0.25)*duration)
  elif activity == "105":    
    bmr_1 = int((5*weight+0.35)*duration)
  elif activity == "106":    
    bmr_1 = int((4.5*weight+0.75)*duration)

  elif activity == "107":  
    if kind == "a":      
      bmr_1 = int((2.5*weight+0.64)*duration) 
    elif kind == "b":      
      bmr_1 = int((4*weight-0.18)*duration)  
    elif kind == "c":     
      bmr_1 = int((3*weight+0.25)*duration)

  elif activity == "108":  
    if kind == "a":     
      bmr_1 = int((5.5*weight+0.84)*duration) 
    elif kind == "b":      
      bmr_1 = int((2.5*weight+0.64)*duration)  
    
  elif activity == "109":     
    if kind == "a":     
      bmr_1 = int((3*weight+0.2)*duration) 
    elif kind == "b":     
      bmr_1 = int((3.5*weight+0.25)*duration)  

  elif activity == "110":   
    bmr_1 = int((6*weight+0.4)*duration)
  elif activity == "111":    
    bmr_1 = int((4.28*weight+1.4)*duration)

  elif activity == "112":  
    if kind == "a":      
      bmr_1 = int((4*weight-0.18)*duration) 
    if kind == "b":      
      bmr_1 = int((4*weight-0.18)*duration) 
    elif kind == "c":      
      bmr_1 = int((1.5*weight+0.6)*duration)
    elif kind == "d":     
      bmr_1 = int((4.5*weight+0.75)*duration)

  elif activity == "113":   
    bmr_1 = int((3.5*weight+0.25)*duration)

  elif activity == "114":   
    if kind == "a":     
      bmr_1 = int((8*weight-1.2)*duration) 
    if kind == "b":      
      bmr_1 = int((8*weight-1.2)*duration) 

  elif activity == "115":    
    if kind == "a":     
      bmr_1 = int((3*weight+0.25)*duration) 
    if kind == "b":      
      bmr_1 = int((2.5*weight+0.64)*duration)
    if kind == "c":     
      bmr_1 = int((3*weight+0.2)*duration) 

  elif activity == "116":   
    bmr_1 = int((4*weight-0.18)*duration)
  elif activity == "117":    
    bmr_1 = int((4*weight-0.18)*duration) 

  return bmr_1
  

#User goal
def user_goal(data):
  user_goal = data['goals'].lower()  
  while user_goal not in ["gain", "maintain", 'loss']:
    print("Please insert your goal correctly")
    user_goal = input("Choose your goal " + name + "\nGain/Maintain/Loss? ").lower()
  if user_goal == "gain":
    add_cal = int(500)
  elif user_goal == "maintain":
    add_cal = 0
  elif user_goal == "loss":
    add_cal = int(-500)
  return add_cal

#User age 
def user_age(data):
  age = int(data['age'])
  while age not in list(range(13, 61)):
    print("We need to say sorry, this app is only for 13 - 60 years old for now")
    age = int(input("What is your age " + name + " ? ")) 
  return age

#User height
def user_height(data):
  height = int(data['height'])
  while height not in list(range(80, 301)):
    print("Please insert your height correctly")
    height = int(input("What is your height " + name + " "))
  return height

#User weight
def user_weight(data):
  weight = int(data['weightCurrent'])
  while weight not in list(range(20, 500)):
    print("Please insert your weight correctly")
    weight = int(input("What is your weight " + name + " "))
  return weight

#Basal Metabolic Rate
def BMR(name, gender, height, weight, age, goal):
  if gender == "male":
    bmr = int(88.4 + (13.4*weight) + (4.8*height) - (5.68*age) + goal)
  elif gender == "female":
    bmr = int(447.6 + (9.25*weight) + (3.1*height) - (4.33*age) + goal)
  return bmr

def user_activity(data):
  activity_question = len(data['activities'])
  addCalorie = 0
  if activity_question == 0:
    aktivitas = 0
    addCalorie = 0
    return addCalorie
  elif activity_question > 0:
    activity_lists = data['activities']
    weight = user_weight(data)
    for item in activity_lists:
      addCalorie = addCalorie + list_activity(weight, item)
    return addCalorie

def calories_need(bmr, user_activities):
  cal_need = bmr + user_activities
  return cal_need

state_1 = {
     0 : "Arsik",
     1 : "Ayam panggang bumbu kuning",
     2 : "Daging panggang",
     3 : "Ikan mas pepes",
     4 : "Sambal goreng tempe",
     5 : "Telur rebus",
     6 : "Telur dadar",
     7 : "Ati ayam goreng",
     8 : "Ayam pop",
     9 : "Bakso daging sapi",
     10 : "Empal daging",
     11 : "Ikan bandeng goreng",
     12 : "Ikan baronang goreng",
     13 : "Ikan bawal goreng",
     14 : "Ikan ekor goreng",
     15 : "Ikan kembung goreng",
     16 : "Ikan lele goreng",
     17 : "Ikan patin goreng",
     18 : "Ikan selar goreng",
     19 : "Ikan tenggiri goreng",
     20 : "Ikan teri goreng",
     21 : "Ikan tuna goreng",
     22 : "Tahu/tempe bacem",
     23 : "Telur mata sapi",
     24 : "Tahu/tempe goreng",
     25 : "Udang goreng",
     26 : "Sambal goreng tempe teri",
     27 : "Sambal goreng ati sapi",
     28 : "sambal goreng udang",
     29 : "Sop sapi",
 }

state_2 = {
     0 : "Acar kuning",
     1 : "Bayam",
     2 : "Cah labu siam",
     3 : "Sayur asam",
     4 : "Sop bayam",
     5 : "Sop mutiara jagung",
     6 : "Sop telur putih",
     7 : "Gudeg",
     8 : "Sayur lodeh",
     9 : "Cah jagung",
     10 : "Cah kacang panjang",
     11 : "Tumis buncis",
     12 : "Tumis daun singkong",
     13 : "Tumis kacang panjang + jagung",
     14 : "Sop Oyong"
 }
state_3 = {
     0 : "Apel",
     1 : "Belimbing",
     2 : "Jambu",
     3 : "Jeruk",
     4 : "Mangga",
     5 : "Nanas",
     6 : "Pepaya",
     7 : "Pir",
     8 : "Pisang",
     9 : "Salak",
     10 : "Semangka",
     11 : "Alpukat",
     12 : "Anggur",
     13 : "Lengkeng",
     14 : "Melon",
     15 : "Sirsak",
     16 : "Durian",
     17 : "Rambutan",
     18 : "Sawo",
     19 : "Jambu biji"
 }

prob_A = np.ones([len(state_1), len(state_1)], dtype = int)/len(state_1)
prob_B = np.ones([len(state_2), len(state_2)], dtype = int)/len(state_2)
prob_C = np.ones([len(state_3), len(state_3)], dtype = int)/len(state_3)

def saran(n,state,prob):
  start_state = 0
  curr_state = start_state
  a_list = []

  while len(a_list) < n:
    curr_state = np.random.choice(np.arange(len(state)), p=prob[curr_state])
    rec = state[curr_state]
    a_list.append(rec)
    start_state +=1
  return a_list

def maintain(n):
  A = saran(n, state_1, prob_A)
  B = saran(n, state_2, prob_B)
  C = saran(n, state_3, prob_C)
  D = np.array([A,B,C]).T.tolist()
  return {"foodLists": [
            {
                "breakfast": {
                    "food": D[0:3][0][0],
                    "vegetable": D[0:3][0][1],
                    "fruit": D[0:3][0][2]
                },
                "lunch": {
                    "food":D[0:3][1][0],
                    "vegetable":D[0:3][1][1],
                    "fruit":D[0:3][1][2]
                },
                "dinner": {
                    "food": D[0:3][2][0],
                    "vegetable": D[0:3][2][1],
                    "fruit": D[0:3][2][2]
                }
            },
            {
                "breakfast": {
                    "food": D[3:6][0][0],
                    "vegetable": D[3:6][0][1],
                    "fruit": D[3:6][0][2]
                },
                "lunch": {
                    "food": D[3:6][1][0],
                    "vegetable": D[3:6][1][1],
                    "fruit": D[3:6][1][2]
                },
                "dinner": {
                    "food": D[3:6][2][0],
                    "vegetable": D[3:6][2][1],
                    "fruit": D[3:6][2][2]
                }
            },
            {
                "breakfast": {
                    "food": D[6:9][0][0],
                    "vegetable": D[6:9][0][1],
                    "fruit": D[6:9][0][2]
                },
                "lunch": {
                    "food": D[6:9][1][0],
                    "vegetable": D[6:9][1][1],
                    "fruit": D[6:9][1][2]
                },
                "dinner": {
                    "food": D[6:9][2][0],
                    "vegetable": D[6:9][2][1],
                    "fruit": D[6:9][2][2]
                }
            }
        ]
        }

def loss(n):
  A = saran(n, state_1, prob_A)
  B = saran(n, state_2, prob_B)
  C = saran(n, state_3, prob_C)
  D = np.array([A,B,C]).T.tolist()

  return {"foodLists": [
            {
                "brunch": {
                    "food": D[0:2][0][0],
                    "vegetable": D[0:2][0][1],
                    "fruit": D[0:2][0][2]
                },
                "dinner": {
                    "food": D[0:2][1][0],
                    "vegetable": D[0:2][1][1],
                    "fruit": D[0:2][1][2]
                }
            },
            {
                "brunch": {
                    "food": D[2:4][0][0],
                    "vegetable": D[2:4][0][1],
                    "fruit": D[2:4][0][2]
                },
                "dinner": {
                    "food": D[2:4][1][0],
                    "vegetable": D[2:4][1][1],
                    "fruit": D[2:4][1][2]
                }
            },
            {
                "brunch": {
                    "food": D[4:6][0][0],
                    "vegetable": D[4:6][0][1],
                    "fruit": D[4:6][0][2]
                },
                "dinner": {
                    "food": D[4:6][1][0],
                    "vegetable": D[4:6][1][1],
                    "fruit": D[4:6][1][2]
                }
            }
        ]
        }

def gain(n):
  A = saran(n, state_1, prob_A)
  B = saran(n, state_2, prob_B)
  C = saran(n, state_3, prob_C)
  D = np.array([A,B,C]).T.tolist()
  return {"foodLists": [
            {
                "breakfast": {
                    "food": D[0:4][0][0],
                    "vegetable": D[0:4][0][1],
                    "fruit": D[0:4][0][2]
                },
                "brunch": {
                    "food":D[0:4][1][0],
                    "vegetable":D[0:4][1][1],
                    "fruit":D[0:4][1][2]
                },
                "lunch": {
                    "food":D[0:4][2][0],
                    "vegetable":D[0:4][2][1],
                    "fruit":D[0:4][2][2]
                },
                "dinner": {
                    "food": D[0:4][3][0],
                    "vegetable": D[0:4][3][1],
                    "fruit": D[0:4][3][2]
                }
            },
            {
                "breakfast": {
                    "food": D[4:8][0][0],
                    "vegetable": D[4:8][0][1],
                    "fruit": D[4:8][0][2]
                },
                "brunch": {
                    "food": D[4:8][1][0],
                    "vegetable": D[4:8][1][1],
                    "fruit": D[4:8][1][2]
                },
                "lunch": {
                    "food": D[4:8][2][0],
                    "vegetable": D[4:8][2][1],
                    "fruit": D[4:8][2][2]
                },
                "dinner": {
                    "food": D[4:8][3][0],
                    "vegetable": D[4:8][3][1],
                    "fruit": D[4:8][3][2]
                }
            },
            {
                "breakfast": {
                    "food": D[9:12][0][0],
                    "vegetable": D[9:12][0][1],
                    "fruit": D[9:12][0][2]
                },
                "brunch": {
                    "food": D[9:12][1][0],
                    "vegetable": D[9:12][1][1],
                    "fruit": D[9:12][1][2]
                },
                "lunch": {
                    "food": D[9:12][2][0],
                    "vegetable": D[9:12][2][1],
                    "fruit": D[9:12][2][2]
                },
                "dinner": {
                    "food": D[9:12][3][0],
                    "vegetable": D[9:12][3][1],
                    "fruit": D[9:12][3][2]
                }
            }
        ]
        }

def main():
  lines = get_lines()
  data = json.loads(lines)
  name = user_name(data)
  gender = user_gender(data)
  goal = user_goal(data)
  age = user_age(data)
  height = user_height(data)
  weight = user_weight(data)
  
  bmr = BMR(name, gender, height, weight, age, goal)
  user_activities = user_activity(data)
  total = calories_need(bmr, user_activities)

  if total > 1000 and total <= 2000:
    model = loss(6)
    str(model)
    output = {
      "totalCalories": total,
      "foodLists": model
    }
    print(output)

  elif total > 2000 and total <= 3000:
    model = maintain(9)
    str(model)
    output = {
      "totalCalories": total,
      "foodLists": model
    }
    print(output)

  elif total > 3000:
    model = gain(12)
    str(model)
    output = {
      "totalCalories": total,
      "foodLists": model
    }
    print(output)

if __name__=='__main__':
    main()